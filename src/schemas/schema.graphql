"Draft order parameters"
type DraftOrder {
    "The draft order ID"
    _id: ID!

    "The linked cart ID"
    cartId: String

    "The date and time at which draft order was created"
    createdAt: DateTime!

    "anonymousCartToken"
    cartToken: ID

    "accountId"
    accountId: ID

    "linked account"
    account: Account

    "shop id for the draft order"
    shopId: ID!
}

"input for draft orders"
input DraftOrderInput {
    "The draft order ID"
    _id: ID

    "The cart id"
    cartId: String

    "anonymousCartToken"
    cartToken: String

    "accountId"
    accountId: ID
}

"input for draft order cart"
input CreateDraftOrderCartInput {
    "Input to create cart"
    createCartInput: CreateCartInput!

    "accountId"
    accountId: ID

    "An optional string identifying the mutation call, which will be returned in the response payload"
    clientMutationId: String

    "shop id for the draft order"
    shopId: ID!

    "draft order id"
    draftOrderId: ID!
}

type CreateDraftOrderCartPayload {
    draftOrder: DraftOrder
}

input PlaceDraftOrderInput {
    "input for draft order"
    draftOrder: DraftOrderInput!

    "An optional string identifying the mutation call, which will be returned in the response payload"
    clientMutationId: String

    "shop id for the draft order"
    shopId: ID!
}

type PlaceDraftOrderPayload {
    draftOrder: DraftOrder
}

input AddDraftOrderAccountInput {
    "account id for the order"
    accountId: ID

    "cart id related with the order"
    cartId: ID

    "cart token if the cart is anonymous"
    cartToken: String

    "shop id where the order comes from"
    shopId: ID!

    "draft order id"
    draftOrderId: ID!
}

type AddDraftOrderAccountPayload {
    draftOrder: DraftOrder
}

input AddDraftOrderCartItemsInput {
    "The cart id"
    cartId: ID!

    "cart token if origin is anonymous"
    cartToken: String

    "the linked account id"
    accountId: ID

    "client mutation id to use as a reference"
    clientMutationId: String

    "items to add into the cart"
    items: [CartItemInput]!
}

type AddDraftOrderCartItemsPayload {
    "draft order"
    cart: Cart

    "the client mutation id"
    clientMutationId: String
}

input SetShippingAddressFromDraftOrderInput {
  "The shipping address"
  address: CustomAddressInput!

  "If set, this will be saved as the Address._id. Otherwise an ID will be generated."
  addressId: String

  "The cart to set shipping address on"
  cartId: ID!

  "The token for the cart, required if it is an anonymous cart"
  cartToken: String

  "The account id"
  accountId: ID

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

type SetShippingAddressFromDraftOrderPayload {
  "The updated Cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

input UpdateFulfillmentOptionsForGroupFromDraftOrderInput {
  "The cart to update fulfillment options for"
  cartId: ID!

  "The token for the cart, required if it is an anonymous cart"
  cartToken: String

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The group to update fulfillment options for"
  fulfillmentGroupId: ID!

  "The account id"
  accountId: ID!
}

type UpdateFulfillmentOptionsForGroupFromDraftOrderPayload {
  "The updated Cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

input PlaceOrderFromDraftOrderInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The order to be placed, if payment is accepted"
  order: OrderInput!

  """
  The information necessary to pay. Collect this information from the shopper during a checkout flow.
  You need not provide any payment input if the total is zero.
  The total of all payment input `amount` fields must add up to the order total. The first payment
  method where the `amount` field is `null` will be charged the remainder due.
  """
  payments: [PaymentInput]
  
  "Json to billing"
  billing: JSONObject

  "Json to gift"
  giftNote: JSONObject

  "Account id"
  accountId: ID

  "Draft order id"
  draftOrderId: ID!
}

type PlaceOrderFromDraftOrderPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Orders that were created"
  orders: [Order]!

  "If you are not logged in, this will be a token that can be used for future requests"
  token: String
}

input UpdateFulfillmentTypeForGroupFromDraftOrderInput {
    "The cart id to update"
    cartId: String!

    "The cartToken"
    cartToken: String

    "The fulfillment group to update"
    fulfillmentGroupId: String!

    "Selected fulfillment type"
    fulfillmentType: FulfillmentType!

    "The account id"
    accountId: ID
}

type UpdateFulfillmentTypeForGroupFromDraftOrderPayload {
    "The updated cart"
    cart: Cart!

    "The cliend mutation id"
    clientMutationId: String
}

input SelectFulfillmentOptionForGroupFromDraftOrderInput {
  "The cart to select this option for"
  cartId: ID!

  "The token for the cart, required if it is an anonymous cart"
  cartToken: String

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The group to select this option for"
  fulfillmentGroupId: ID!

  "The fulfillment method ID from the option the shopper selected"
  fulfillmentMethodId: ID!

  "Linked account id"
  accountId: ID!
}

type SelectFulfillmentOptionForGroupFromDraftOrderPayload {
  "The updated Cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

extend type Mutation {
    "Mutation to place draft order"
    placeDraftOrder(
        input: PlaceDraftOrderInput!
    ) : PlaceDraftOrderPayload!

    "Mutation to create draft order cart"
    createDraftOrderCart(
        input: CreateDraftOrderCartInput!
    ) : CreateDraftOrderCartPayload!

    "Mutation to add account into the draft order"
    addDraftOrderAccount(
        input: AddDraftOrderAccountInput!
    ): AddDraftOrderAccountPayload!

    "Mutation to add more items to existent cart"
    addDraftOrderCartItems(
        input: AddDraftOrderCartItemsInput!
    ): AddDraftOrderCartItemsPayload!

    "Set the sipping address for all fulfillment groups from draft orders"
    setShippingAddressFromDraftOrder(
        input: SetShippingAddressFromDraftOrderInput!
    ): SetShippingAddressFromDraftOrderPayload!

    "udpates all fulfillment options"
    updateFulfillmentOptionsForGroupFromDraftOrder(
        input: UpdateFulfillmentOptionsForGroupFromDraftOrderInput!
    ): UpdateFulfillmentOptionsForGroupFromDraftOrderPayload!
    """
    Use this mutation to place an order from draft order, providing information necessary to pay for it.
    The order will be placed only if authorization is successful for all submitted payments.
    """
    placeOrderFromDraftOrder(
        input: PlaceOrderFromDraftOrderInput!
    ): PlaceOrderFromDraftOrderPayload!
    "Updates a fulfillment type for a single fulfillment group in cart"
    updateFulfillmentTypeForGroupFromDraftOrder(
        input: UpdateFulfillmentTypeForGroupFromDraftOrderInput!
    ): UpdateFulfillmentTypeForGroupFromDraftOrderPayload!
    "Select a fulfillment option from the `availableFulfillmentOptions` list for a fulfillment group"
    selectFulfillmentOptionForGroupFromDraftOrder(
        input: SelectFulfillmentOptionForGroupFromDraftOrderInput!
    ): SelectFulfillmentOptionForGroupFromDraftOrderPayload!
}

extend type Query {
    "Gets a single draft order"
    draftOrder (
        draftOrderId: ID!
    ) : DraftOrder
}
