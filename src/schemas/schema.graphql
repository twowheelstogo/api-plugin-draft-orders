"Draft Order status"
enum DraftOrderStatus {
    "Created order"
    created

    "Processed order"
    processing

    "pending"
    pending

    "Scheduled order"
    scheduled

    "Abandoned order"
    abandoned

    "Completed order"
    completed

    "Canceled order"
    canceled
}

extend input BillingDetailsInput {
    name: String

    isCf: Boolean

    partnerId: Int
}

extend type BillingDetails {
    name: String

    isCf: Boolean

    partnerId: Int
}

"Draft order parameters"
type DraftOrder implements Node {
    "The draft order ID"
    _id: ID!

    "The related order id"
    orderId: ID

    "The related order"
    order: Order

    "Reference id"
    referenceId: Int

    "The linked cart ID"
    cartId: String

    "The date and time at which draft order was created"
    createdAt: DateTime!

    "The date and time at which draft order was udpated"
    updatedAt: DateTime!

    "anonymousCartToken"
    cartToken: ID

    "accountId"
    accountId: ID

    "linked account"
    account: Account

    "shop id for the draft order"
    shopId: ID!

    "The status of the order"
    status: DraftOrderStatus!

    "Billing"
    billing: BillingDetails

    "Gift details"
    giftNote: GiftNote

    "Customer notes"
    notes: [JSONObject]
}

"input for draft orders"
input DraftOrderInput {
    "The draft order ID"
    _id: ID

    "The cart id"
    cartId: String

    "anonymousCartToken"
    cartToken: String

    "accountId"
    accountId: ID

    "the order status"
    status: DraftOrderStatus
}

"input for draft order cart"
input CreateDraftOrderCartInput {
    "Input to create cart"
    createCartInput: CreateCartInput!

    "accountId"
    accountId: ID

    "An optional string identifying the mutation call, which will be returned in the response payload"
    clientMutationId: String

    "shop id for the draft order"
    shopId: ID!

    "draft order id"
    draftOrderId: ID!
}

type CreateDraftOrderCartPayload {
    draftOrder: DraftOrder
}

input PlaceDraftOrderInput {
    "input for draft order"
    draftOrder: DraftOrderInput!

    "An optional string identifying the mutation call, which will be returned in the response payload"
    clientMutationId: String

    "shop id for the draft order"
    shopId: ID!
}

type PlaceDraftOrderPayload {
    draftOrder: DraftOrder
}

input AddDraftOrderAccountInput {
    "account id for the order"
    accountId: ID

    "cart id related with the order"
    cartId: ID

    "cart token if the cart is anonymous"
    cartToken: String

    "shop id where the order comes from"
    shopId: ID!

    "draft order id"
    draftOrderId: ID!
}

type AddDraftOrderAccountPayload {
    draftOrder: DraftOrder
}

input AddDraftOrderCartItemsInput {
    "The cart id"
    cartId: ID!

    "cart token if origin is anonymous"
    cartToken: String

    "the linked account id"
    accountId: ID

    "client mutation id to use as a reference"
    clientMutationId: String

    "items to add into the cart"
    items: [CartItemInput]!
}

type AddDraftOrderCartItemsPayload {
    "draft order"
    cart: Cart

    "the client mutation id"
    clientMutationId: String
}

input SetShippingAddressFromDraftOrderInput {
  "The shipping address"
  address: CustomAddressInput!

  "If set, this will be saved as the Address._id. Otherwise an ID will be generated."
  addressId: String

  "The cart to set shipping address on"
  cartId: ID!

  "The token for the cart, required if it is an anonymous cart"
  cartToken: String

  "The account id"
  accountId: ID

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String
}

type SetShippingAddressFromDraftOrderPayload {
  "The updated Cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

input UpdateFulfillmentOptionsForGroupFromDraftOrderInput {
  "The cart to update fulfillment options for"
  cartId: ID!

  "The token for the cart, required if it is an anonymous cart"
  cartToken: String

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The group to update fulfillment options for"
  fulfillmentGroupId: ID!

  "The account id"
  accountId: ID!
}

type UpdateFulfillmentOptionsForGroupFromDraftOrderPayload {
  "The updated Cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

input OrderNoteInput {
    "The account id"
    userId: ID

    "content"
    content: String!

    "created timestamp"
    createdAt: DateTime!

    "updated timestamp"
    updatedAt: DateTime!
}


input PlaceOrderFromDraftOrderInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The order to be placed, if payment is accepted"
  order: OrderInput!

  """
  The information necessary to pay. Collect this information from the shopper during a checkout flow.
  You need not provide any payment input if the total is zero.
  The total of all payment input `amount` fields must add up to the order total. The first payment
  method where the `amount` field is `null` will be charged the remainder due.
  """
  payments: [PaymentInput]
  
  "Json to billing"
  billing: JSONObject

  "Json to gift"
  giftNote: JSONObject

  "Account id"
  accountId: ID

  "Draft order id"
  draftOrderId: ID!
}

extend input OrderInput {
    "notes"
    notes: [OrderNoteInput]
}

type PlaceOrderFromDraftOrderPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "Orders that were created"
  orders: [Order]

  "If you are not logged in, this will be a token that can be used for future requests"
  token: String
}

input UpdateFulfillmentTypeForGroupFromDraftOrderInput {
    "The cart id to update"
    cartId: String!

    "The cartToken"
    cartToken: String

    "The fulfillment group to update"
    fulfillmentGroupId: String!

    "Selected fulfillment type"
    fulfillmentType: FulfillmentType!

    "The account id"
    accountId: ID
}

type UpdateFulfillmentTypeForGroupFromDraftOrderPayload {
    "The updated cart"
    cart: Cart!

    "The cliend mutation id"
    clientMutationId: String
}

input SelectFulfillmentOptionForGroupFromDraftOrderInput {
  "The cart to select this option for"
  cartId: ID!

  "The token for the cart, required if it is an anonymous cart"
  cartToken: String

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The group to select this option for"
  fulfillmentGroupId: ID!

  "The fulfillment method ID from the option the shopper selected"
  fulfillmentMethodId: ID!

  "Linked account id"
  accountId: ID!
}

type SelectFulfillmentOptionForGroupFromDraftOrderPayload {
  "The updated Cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

input UpdateCartItemsQuantityFromDraftOrdersInput {
  "The cart ID"
  cartId: ID!

  "If this cart is anonymous, provide the `cartToken` that was returned in the `CreateCartPayload`"
  cartToken: String

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "Array of cart item quantities to update."
  items: [UpdateCartItemInput]!

  "Account id"
  accountId: ID!
}

type UpdateCartItemsQuantityFromDraftOrdersPayload {
  "The modified cart"
  cart: Cart!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

input UpdateDraftOrderInput {
    billing: BillingDetailsInput

    giftNote: GiftNoteInput

    shopId: ID!

    draftOrderId: ID!

    deliveryDate: DateTime

    notes: [JSONObject]
}

type UpdateDraftOrderPayload {
    draftOrder: DraftOrder
}

extend type Mutation {
    "Mutation to place draft order"
    placeDraftOrder(
        input: PlaceDraftOrderInput!
    ) : PlaceDraftOrderPayload!

    "Mutation to create draft order cart"
    createDraftOrderCart(
        input: CreateDraftOrderCartInput!
    ) : CreateDraftOrderCartPayload!

    "Mutation to add account into the draft order"
    addDraftOrderAccount(
        input: AddDraftOrderAccountInput!
    ): AddDraftOrderAccountPayload!

    "Mutation to add more items to existent cart"
    addDraftOrderCartItems(
        input: AddDraftOrderCartItemsInput!
    ): AddDraftOrderCartItemsPayload!

    "Set the sipping address for all fulfillment groups from draft orders"
    setShippingAddressFromDraftOrder(
        input: SetShippingAddressFromDraftOrderInput!
    ): SetShippingAddressFromDraftOrderPayload!

    "udpates all fulfillment options"
    updateFulfillmentOptionsForGroupFromDraftOrder(
        input: UpdateFulfillmentOptionsForGroupFromDraftOrderInput!
    ): UpdateFulfillmentOptionsForGroupFromDraftOrderPayload!
    """
    Use this mutation to place an order from draft order, providing information necessary to pay for it.
    The order will be placed only if authorization is successful for all submitted payments.
    """
    placeOrderFromDraftOrder(
        input: PlaceOrderFromDraftOrderInput!
    ): PlaceOrderFromDraftOrderPayload!
    "Updates a fulfillment type for a single fulfillment group in cart"
    updateFulfillmentTypeForGroupFromDraftOrder(
        input: UpdateFulfillmentTypeForGroupFromDraftOrderInput!
    ): UpdateFulfillmentTypeForGroupFromDraftOrderPayload!
    "Select a fulfillment option from the `availableFulfillmentOptions` list for a fulfillment group"
    selectFulfillmentOptionForGroupFromDraftOrder(
        input: SelectFulfillmentOptionForGroupFromDraftOrderInput!
    ): SelectFulfillmentOptionForGroupFromDraftOrderPayload!

    updateCartItemsQuantityFromDraftOrders(
        input: UpdateCartItemsQuantityFromDraftOrdersInput!
    ): UpdateCartItemsQuantityFromDraftOrdersPayload!
    "Updates a draft order - saves billing, gift notes and customer notes"
    updateDraftOrder(
        input: UpdateDraftOrderInput!
    ): UpdateDraftOrderPayload!
}

type DraftOrderConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [DraftOrderEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [DraftOrder]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

"A connection edge in which each node is a `Order` object"
type DraftOrderEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The draft order"
  node: DraftOrder
}

extend type Query {
    "Gets a single draft order"
    draftOrder (
        draftOrderId: ID!
    ) : DraftOrder
    "Get all draft orders for a single account, optionally limited to certain shop IDs and certain orderStatus"
    draftOrders(
        "Filters to apply to a list of orders"
        filters: OrderFilterInput

        "Provide a list of shop IDs from which you want to get orders from"
        shopIds: [ID],

        "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
        after: ConnectionCursor,

        "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
        before: ConnectionCursor,

        "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
        first: ConnectionLimitInt,

        "Return at most this many results. This parameter may be used with the `before` parameter."
        last: ConnectionLimitInt,

        "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
        offset: Int,

        "Return results sorted in this order"
        sortOrder: SortOrder = desc,

        "By default, orders are sorted by when they were created, newest first. Set this to sort by one of the other allowed fields"
        sortBy: OrdersSortByField = createdAt
  ): DraftOrderConnection!
}
