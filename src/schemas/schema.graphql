"Draft order parameters"
type DraftOrder {
    "The draft order ID"
    _id: ID!

    "The linked cart ID"
    cartId: String

    "The date and time at which draft order was created"
    createdAt: DateTime!

    "anonymousCartToken"
    cartToken: ID

    "accountId"
    accountId: ID

    "shop id for the draft order"
    shopId: ID!
}

"input for draft orders"
input DraftOrderInput {
    "The draft order ID"
    _id: ID

    "The cart id"
    cartId: String

    "anonymousCartToken"
    cartToken: String

    "accountId"
    accountId: ID
}

"input for draft order cart"
input CreateDraftOrderCartInput {
    "Input to create cart"
    createCartInput: CreateCartInput!

    "accountId"
    accountId: ID

    "An optional string identifying the mutation call, which will be returned in the response payload"
    clientMutationId: String

    "shop id for the draft order"
    shopId: ID!

    "draft order id"
    draftOrderId: ID!
}

type CreateDraftOrderCartPayload {
    draftOrder: DraftOrder
}

input PlaceDraftOrderInput {
    "input for draft order"
    draftOrder: DraftOrderInput!

    "An optional string identifying the mutation call, which will be returned in the response payload"
    clientMutationId: String

    "shop id for the draft order"
    shopId: ID!
}

type PlaceDraftOrderPayload {
    draftOrder: DraftOrder
}

input AddDraftOrderAccountInput {
    "account id for the order"
    accountId: ID

    "cart id related with the order"
    cartId: ID

    "cart token if the cart is anonymous"
    cartToken: String

    "shop id where the order comes from"
    shopId: ID!

    "draft order id"
    draftOrderId: ID!
}

type AddDraftOrderAccountPayload {
    draftOrder: DraftOrder
}

input AddDraftOrderCartItemsInput {
    "The cart id"
    cartId: ID!

    "cart token if origin is anonymous"
    cartToken: String

    "the linked account id"
    accountId: ID

    "client mutation id to use as a reference"
    clientMutationId: String

    "items to add into the cart"
    items: [CartItemInput]!
}

type AddDraftOrderCartItemsPayload {
    "draft order"
    cart: Cart

    "the client mutation id"
    clientMutationId: String
}

extend type Mutation {
    "Mutation to place draft order"
    placeDraftOrder(
        input: PlaceDraftOrderInput!
    ) : PlaceDraftOrderPayload!

    "Mutation to create draft order cart"
    createDraftOrderCart(
        input: CreateDraftOrderCartInput!
    ) : CreateDraftOrderCartPayload!

    "Mutration to add account into the draft order"
    addDraftOrderAccount(
        input: AddDraftOrderAccountInput!
    ): AddDraftOrderAccountPayload!

    "Mutation to add more items to existent cart"
    addDraftOrderCartItems(
        input: AddDraftOrderCartItemsInput!
    ): AddDraftOrderCartItemsPayload!
}

extend type Query {
    "Gets a single draft order"
    draftOrder (
        draftOrderId: ID!
    ) : DraftOrder
}
